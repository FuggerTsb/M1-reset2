local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")

-- Function to enable/disable no-clip effect
local function toggleNoClip(character, enable)
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            part.CanCollide = not enable
        end
    end
end

-- Fling function
local function fling(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local lookDirection = humanoidRootPart.CFrame.LookVector
        local flingVelocity = lookDirection * 120 -- Adjust speed if needed

        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = flingVelocity
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Parent = humanoidRootPart

        game.Debris:AddItem(bodyVelocity, 0.05) -- Clean up quickly
    end
end

-- Function to make character jump
local function makeJump(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

-- Function to set up keybind listener (only set once)
local function onKeyPress(input, gameProcessed)
    if gameProcessed or not player.Character then return end
    local character = player.Character
    
    if input.KeyCode == Enum.KeyCode.V then
        makeJump(character)
        
        -- Enable no-clip for 2 seconds
        toggleNoClip(character, true)
        
        -- Perform the fling
        fling(character)

        -- Disable no-clip after 2 seconds
        task.delay(10, function()
            toggleNoClip(character, false)
        end)
    end
end

-- Listen for key presses globally (only once)
userInputService.InputBegan:Connect(onKeyPress)

-- Detect when character is added (including respawns)
local function onCharacterAdded(character)
    character:WaitForChild("HumanoidRootPart", 10) -- Ensure it's loaded
end

-- Initial setup for current character
if player.Character then
    onCharacterAdded(player.Character)
end

-- Reconnect when the player respawns
player.CharacterAdded:Connect(onCharacterAdded)
